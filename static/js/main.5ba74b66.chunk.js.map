{"version":3,"sources":["components/App/layout/Header.tsx","components/App/features/CovidInfo/InfoNode.tsx","components/App/features/CovidInfo/InfoGrid.tsx","components/App/layout/Footer.tsx","components/App/api/agent.ts","components/App/features/CovidInfo/ShowInfoButton.tsx","components/App/features/CovidInfo/CountrySelector.tsx","components/App/layout/LoadingComponent.tsx","components/App/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","target","rel","href","InfoNode","title","covidData","InfoGrid","data","dateToFormat","Date","format","date","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Footer","axios","defaults","baseURL","responseBody","response","requests","url","get","then","agent","CovidInfo","list","ShowInfoButton","showInfo","toggleInfoBool","disabled","onClick","CountrySelector","selectorInfo","selectCountry","onChange","e","value","map","item","ID","Country","xmlns","viewBox","d","LoadingComponent","App","useState","isLoading","setIsLoading","covidInfo","setCovidInfo","selectedCountry","setSelectedCountry","toggleData","setToggleData","setDisabled","useEffect","res","id","Countries","find","country","Global","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ba74b66.chunk.js","sourcesContent":["export default function Header() {\r\n    return (\r\n        <header className='text-center bg-gradient-to-r from-green-400 via-blue-700 to-green-700 text-white p-4 mb-4'>\r\n            <div className='text-3xl md:text-5xl font-bold mb-3'>\r\n            Covid-19 Tracker\r\n            </div>\r\n            <p>API courtesy of <a className='text-blue-300' \r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                href=\"https://covid19api.com\"\r\n                >covid19api.com</a></p>\r\n        </header>    \r\n    )\r\n}\r\n","\r\n\r\ninterface Props {\r\n    title: string\r\n    covidData: number\r\n}\r\n\r\nfunction InfoNode({ title, covidData }: Props) {\r\n    return (\r\n        <div className='bg-green-300 h-32 rounded-xl shadow-lg'>\r\n            <div className='font-bold text-xl mb-6 underline'>{title}:</div>\r\n            <div className='text-center font-bold text-3xl'>\r\n                {covidData}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoNode\r\n","import Moment from 'react-moment';\r\nimport InfoNode from './InfoNode';\r\nimport CountrySelector from './CountrySelector';\r\nimport { Country, Global } from '../../viewmodels/CovidAPIData';\r\n\r\ninterface Props {\r\n    data: Global | Country | undefined;\r\n    title: string;\r\n};\r\n\r\nfunction InfoGrid({ data, title }: Props) {\r\n    const dateToFormat = data!.Date;\r\n\r\n    return (\r\n        <>\r\n        <span className='text-center text-5xl mb-2'>{title}</span>\r\n        <Moment format='MM/DD/YYYY' date={dateToFormat} className='text-center text-2xl mb-4'/>\r\n            <div className='container max-w-3xl text-center flex flex-grow mb-auto grid grid-cols-1 md:grid-cols-2 gap-4'>\r\n                <InfoNode title='New Confirmed Cases' covidData={data!.NewConfirmed}/>\r\n                <InfoNode title='Total Confirmed Cases' covidData={data!.TotalConfirmed}/>\r\n                <InfoNode title='New Deaths' covidData={data!.NewDeaths}/>\r\n                <InfoNode title='Total Deaths' covidData={data!.TotalDeaths}/>\r\n                <InfoNode title='Newly Recovered' covidData={data!.NewRecovered}/>\r\n                <InfoNode title='Total Recovered' covidData={data!.TotalRecovered}/>\r\n            </div>\r\n        {/* <CountrySelector selectorInfo={selectorInfo}/> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoGrid\r\n","function Footer() {\r\n    return (\r\n        <footer className='border-t-2 mt-16 border-gray-400'>\r\n            <div className='p-4 text-center text-xs text-gray-600'>\r\n                UI by Dakota Chumbley using TailwindCSS and React/Typescript\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { CovidAPIData } from '../viewmodels/CovidAPIData';\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://api.covid19api.com/';\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody)\r\n}\r\n\r\nconst CovidInfo = {\r\n    list: () => requests.get<CovidAPIData>('/summary'),\r\n}\r\n\r\nconst agent = {\r\n    CovidInfo\r\n}\r\n\r\nexport default agent;","interface Props {\r\n    showInfo: () => void;\r\n    toggleInfoBool: boolean;\r\n    disabled: boolean;\r\n}\r\n\r\nfunction ShowInfoButton({ showInfo, toggleInfoBool, disabled }: Props) {\r\n    const showCountryText = 'Show Global Data';\r\n    const showGlobalText = 'Show Country Data'\r\n\r\n    return (\r\n        <div className='text-center mt-8'>\r\n            <button className='bg-blue-500 hover:bg-blue-400 mb-4 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded'\r\n            onClick={() => showInfo()}\r\n            disabled={disabled}>\r\n                {toggleInfoBool ? showCountryText : showGlobalText}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowInfoButton\r\n","import { Country } from '../../viewmodels/CovidAPIData';\r\n\r\ninterface Props {\r\n    selectorInfo: Country[];\r\n    selectCountry: (id: string) => void;\r\n    disabled: boolean;\r\n}\r\n\r\nfunction CountrySelector({ selectorInfo, selectCountry, disabled }: Props) {\r\n    return (\r\n        <div className='text-center mt-4'>\r\n            <div className='inline-block relative w-64'>\r\n                <select onChange={(e) => selectCountry(e.target.value)} className='block appearance-none w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:shadow-outline'>\r\n                    <option disabled={disabled}>Select Country</option>\r\n                    {selectorInfo.map((item) => {\r\n                        return <option value={item.ID}>{item.Country}</option>\r\n                    })}\r\n                </select>\r\n                <div className='pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700'>\r\n                    <svg className='fill-current h-4 w-4' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path d='M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z'/></svg>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountrySelector\r\n","function LoadingComponent() {\r\n    return (\r\n        <div className='flex h-screen justify-center'>\r\n            Loading app...\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent\r\n","import { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport InfoGrid from '../features/CovidInfo/InfoGrid';\r\nimport Footer from './Footer';\r\nimport agent from '../api/agent';\r\nimport ShowInfoButton from '../features/CovidInfo/ShowInfoButton';\r\nimport { Country, CovidAPIData } from '../viewmodels/CovidAPIData';\r\nimport CountrySelector from '../features/CovidInfo/CountrySelector';\r\nimport LoadingComponent from './LoadingComponent';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [covidInfo, setCovidInfo] = useState<CovidAPIData>();\r\n  const [selectedCountry, setSelectedCountry] = useState<Country>();\r\n  const [toggleData, setToggleData] = useState<boolean>(false);\r\n  const [disabled, setDisabled] = useState<boolean>(true);\r\n\r\n  const showInfoHandler = () => {\r\n    setToggleData(!toggleData);\r\n  }\r\n\r\n  useEffect(() => {\r\n    agent.CovidInfo.list().then(res => {\r\n      setCovidInfo(res!);\r\n      setIsLoading(false);\r\n    })\r\n  }, [])\r\n\r\n  const countrySelectionHandler = (id: string) => {\r\n    setSelectedCountry(covidInfo!.Countries.find(country => country.ID === id));\r\n    setDisabled(false);\r\n  }\r\n\r\n  if(isLoading) {\r\n    return <LoadingComponent />\r\n  }\r\n\r\n  return (\r\n    <div className='flex flex-col h-screen'>\r\n    <Header />\r\n    <CountrySelector\r\n        selectCountry={countrySelectionHandler}\r\n        selectorInfo={covidInfo!.Countries!}\r\n        disabled={!disabled}/>\r\n     <ShowInfoButton \r\n      showInfo={showInfoHandler}\r\n      toggleInfoBool={toggleData}\r\n      disabled={disabled}/>\r\n      \r\n      {toggleData ? \r\n          <InfoGrid title={selectedCountry!.Country} data={selectedCountry} />\r\n        :\r\n          <InfoGrid title='Global Covid Data' data={covidInfo!.Global}/>}\r\n      \r\n    <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/layout/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}